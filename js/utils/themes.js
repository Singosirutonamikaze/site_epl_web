/**
 * GESTIONNAIRE DE TH√àMES - Syst√®me de th√®mes clair/sombre
 * 
 * Ce module g√®re le changement de th√®me sur toutes les pages du site EPL.
 * Il utilise les variables CSS d√©finies dans /css/base/variables.css
 * 
 * FONCTIONNEMENT :
 * - Sauvegarde automatique du choix utilisateur dans localStorage
 * - D√©tection de la pr√©f√©rence syst√®me au premier chargement
 * - Application imm√©diate du th√®me sans rechargement de page
 * - √âmission d'√©v√©nements pour synchroniser les composants
 * 
 * POUR L'√âQUIPE :
 * - Importer ce fichier dans chaque page HTML
 * - Le th√®me s'applique automatiquement au chargement
 * - Utiliser window.gestionnaireThemes.changerTheme() pour changer le th√®me
 * - √âcouter l'√©v√©nement 'themeChanged' pour r√©agir aux changements
 * 
 * AUTEUR : sCtt3 | EPL Devs
 * DERNI√àRE MODIFICATION : 22 janvier 2025
 */
class GestionnaireThemes {
    constructor() {
        // Configuration des th√®mes disponibles (ordre de rotation)
        this.themesDisponibles = ['clair', 'sombre'];

        // R√©cup√©ration du th√®me sauvegard√© ou d√©tection automatique
        this.themeActuel = this.obtenirThemeSauvegarde();

        // Application imm√©diate du th√®me au chargement de la page
        this.appliquerTheme(this.themeActuel);

        // Configuration des boutons de th√®me sur la page
        this.configurerBoutonsTheme();

        // √âcoute des changements de pr√©f√©rence syst√®me (dark/light mode)
        this.configurerDetectionSysteme();

        console.log(`üé® Th√®me initialis√© : ${this.themeActuel}`);
    }

    /**
     * R√©cup√®re le th√®me depuis le localStorage
     * Si aucun th√®me sauvegard√©, utilise la pr√©f√©rence syst√®me
     * 
     * @returns {string} Le nom du th√®me √† appliquer
     */
    obtenirThemeSauvegarde() {
        // R√©cup√®re le th√®me sauvegard√© dans le localStorage
        const themeSauvegarde = localStorage.getItem('theme-prefere-epl');

        // V√©rifie que le th√®me sauvegard√© est valide
        if (themeSauvegarde && this.themesDisponibles.includes(themeSauvegarde)) {
            return themeSauvegarde;
        }

        // D√©tecte si l'utilisateur pr√©f√®re le mode sombre via les pr√©f√©rences syst√®me
        const prefereSombre = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const prefereContraste = window.matchMedia('(prefers-contrast: high)').matches;

        // Logique de s√©lection du th√®me par d√©faut
        if (prefereContraste) {
            return 'clair'; // Contraste √©lev√© = th√®me clair
        } else if (prefereSombre) {
            return 'sombre'; // Mode sombre pr√©f√©r√©
        } else {
            return 'clair'; // Par d√©faut, th√®me clair
        }
    }

    /**
     * Applique un th√®me √† la page
     *
     * @param {string} nomTheme - 'clair', 'sombre' ou 'doux'
     */
    appliquerTheme(nomTheme) {
        console.log(`üé® [GestionnaireThemes] Application du th√®me "${nomTheme}"`);

        // Valide que le th√®me existe
        if (!this.themesDisponibles.includes(nomTheme)) {
            console.error(`‚ùå Th√®me "${nomTheme}" invalide. Th√®mes disponibles :`, this.themesDisponibles);
            return;
        }

        // Applique l'attribut data-theme sur l'√©l√©ment HTML
        document.documentElement.setAttribute('data-theme', nomTheme);
        console.log(`‚úÖ [GestionnaireThemes] Attribut data-theme="${nomTheme}" appliqu√©`);

        // Sauvegarde le choix dans le localStorage
        localStorage.setItem('theme-prefere-epl', nomTheme);
        console.log(`üíæ [GestionnaireThemes] Th√®me sauvegard√© dans localStorage`);

        // Met √† jour le th√®me actuel
        this.themeActuel = nomTheme;

        // Met √† jour l'√©tat visuel des boutons de th√®me
        this.mettreAJourBoutonsTheme();

        // √âmet un √©v√©nement personnalis√© pour les autres composants
        window.dispatchEvent(new CustomEvent('changement-theme', {
            detail: {
                theme: nomTheme,
                timestamp: Date.now()
            }
        }));

        console.log(`üé® Th√®me chang√© vers : ${nomTheme}`);
    }

    /**
     * Change vers le th√®me suivant (rotation circulaire)
     * clair => sombre => clair ...
     */
    changerThemeSuivant() {
        const indexActuel = this.themesDisponibles.indexOf(this.themeActuel);
        const indexSuivant = (indexActuel + 1) % this.themesDisponibles.length;
        const themeSuivant = this.themesDisponibles[indexSuivant];

        this.appliquerTheme(themeSuivant);
    }

    /**
     * Change de th√®me (m√©thode principale utilis√©e par les boutons)
     * Alterne entre clair et sombre
     */
    changerTheme() {
        console.log(`üîÑ [GestionnaireThemes] Changement de th√®me demand√©`);
        console.log(`üìä [GestionnaireThemes] Th√®me actuel: ${this.themeActuel}`);

        const nouveauTheme = this.themeActuel === 'clair' ? 'sombre' : 'clair';
        console.log(`üéØ [GestionnaireThemes] Nouveau th√®me: ${nouveauTheme}`);

        this.appliquerTheme(nouveauTheme);
    }

    /**
     * Change vers un th√®me sp√©cifique
     * 
     * @param {string} nomTheme - Le th√®me √† appliquer
     */
    changerVersTheme(nomTheme) {
        this.appliquerTheme(nomTheme);
    }

    /**
     * R√©cup√®re le th√®me actuellement appliqu√©
     * 
     * @returns {string} Le nom du th√®me actuel
     */
    obtenirThemeActuel() {
        return this.themeActuel;
    }

    /**
     * R√©cup√®re la liste des th√®mes disponibles
     * 
     * @returns {string[]} Liste des th√®mes
     */
    obtenirThemesDisponibles() {
        return [...this.themesDisponibles];
    }

    /**
     * Configure les boutons de th√®me s'ils existent
     * Recherche automatiquement les boutons avec data-theme-cible
     */
    configurerBoutonsTheme() {
        // Recherche tous les boutons de th√®me
        const boutonsTheme = document.querySelectorAll('[data-theme-cible]');

        boutonsTheme.forEach(bouton => {
            // Supprime les anciens √©v√©nements pour √©viter les doublons
            bouton.removeEventListener('click', this.gererClicBoutonTheme);

            // Ajoute le nouvel √©v√©nement
            bouton.addEventListener('click', this.gererClicBoutonTheme.bind(this));
        });

        // Met √† jour l'√©tat visuel des boutons
        this.mettreAJourBoutonsTheme();
    }

    /**
     * G√®re le clic sur un bouton de th√®me
     * 
     * @param {Event} evenement - L'√©v√©nement de clic
     */
    gererClicBoutonTheme(evenement) {
        const themeCible = evenement.currentTarget.dataset.themeCible;

        if (themeCible && this.themesDisponibles.includes(themeCible)) {
            this.changerVersTheme(themeCible);
        } else {
            console.error(`‚ùå Th√®me cible invalide : ${themeCible}`);
        }
    }

    /**
     * Met √† jour l'√©tat visuel des boutons de th√®me
     * Ajoute la classe 'actif' au bouton du th√®me actuel
     */
    mettreAJourBoutonsTheme() {
        const boutonsTheme = document.querySelectorAll('[data-theme-cible]');

        boutonsTheme.forEach(bouton => {
            const themeBouton = bouton.dataset.themeCible;

            // Retire la classe actif de tous les boutons
            bouton.classList.remove('actif');

            // Ajoute la classe actif au bouton du th√®me actuel
            if (themeBouton === this.themeActuel) {
                bouton.classList.add('actif');
            }
        });
    }

    /**
     * Configure la d√©tection des changements de pr√©f√©rence syst√®me
     * Permet de changer automatiquement le th√®me si l'utilisateur change ses pr√©f√©rences
     */
    configurerDetectionSysteme() {
        // √âcoute les changements de pr√©f√©rence de couleur
        const mediaQuerySombre = window.matchMedia('(prefers-color-scheme: dark)');
        const mediaQueryContraste = window.matchMedia('(prefers-contrast: high)');

        // Fonction de gestion des changements
        const gererChangementPreference = () => {
            // Ne change le th√®me que si aucun th√®me n'a √©t√© explicitement choisi
            const themeExplicite = localStorage.getItem('theme-prefere-epl');

            if (!themeExplicite) {
                // Recalcule le th√®me par d√©faut bas√© sur les nouvelles pr√©f√©rences
                const nouveauTheme = this.obtenirThemeSauvegarde();
                this.appliquerTheme(nouveauTheme);
            }
        };

        // Ajoute les √©couteurs d'√©v√©nements
        mediaQuerySombre.addEventListener('change', gererChangementPreference);
        mediaQueryContraste.addEventListener('change', gererChangementPreference);
    }

    /**
     * R√©initialise le th√®me aux pr√©f√©rences syst√®me
     * Supprime le choix sauvegard√© et recalcule le th√®me par d√©faut
     */
    reinitialiserTheme() {
        // Supprime le th√®me sauvegard√©
        localStorage.removeItem('theme-prefere-epl');

        // Recalcule le th√®me par d√©faut
        const themeParDefaut = this.obtenirThemeSauvegarde();
        this.appliquerTheme(themeParDefaut);

        console.log('üîÑ Th√®me r√©initialis√© aux pr√©f√©rences syst√®me');
    }

    /**
     * V√©rifie si un th√®me est support√©
     * 
     * @param {string} nomTheme - Le nom du th√®me √† v√©rifier
     * @returns {boolean} True si le th√®me est support√©
     */
    estThemeSupporte(nomTheme) {
        return this.themesDisponibles.includes(nomTheme);
    }
}

// Instance globale accessible partout dans l'application
const gestionnaireThemes = new GestionnaireThemes();

// Export pour utilisation en module si n√©cessaire
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { GestionnaireThemes, gestionnaireThemes };
}

// Export pour utilisation en module ES6 si n√©cessaire
if (typeof window !== 'undefined') {
    window.GestionnaireThemes = GestionnaireThemes;
    window.gestionnaireThemes = gestionnaireThemes;
}