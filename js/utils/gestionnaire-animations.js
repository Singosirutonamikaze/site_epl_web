/**
 * GESTIONNAIRE D'ANIMATIONS EPL - Version √âl√©gante
 *
 * Ce module g√®re toutes les animations et transitions
 * pour donner une image professionnelle √† l'EPL.
 *
 * FONCTIONNALIT√âS :
 * - Animations de chargement √©l√©gantes
 * - Transitions fluides des composants
 * - Micro-interactions professionnelles
 * - Gestion des pr√©f√©rences d'accessibilit√©
 * - Animations de th√®me
 *
 * POUR L'√âQUIPE :
 * - Utiliser animateurEPL.animer() pour d√©clencher des animations
 * - Les animations s'adaptent automatiquement aux pr√©f√©rences utilisateur
 * - Support complet de l'accessibilit√©
 *
 * AUTEUR : sCtt3 | EPL Devs
 * DERNI√àRE MODIFICATION : 18 f√©vrier 2025
 */
class GestionnaireAnimations {
    constructor() {
        // Configuration des animations
        this.animationsActivees = true;
        this.dureeAnimations = {
            rapide: 200,
            normale: 400,
            lente: 800,
        };

        // D√©tection des pr√©f√©rences d'accessibilit√©
        this.prefereReductionMouvement = window.matchMedia(
            "(prefers-reduced-motion: reduce)"
        ).matches;
        this.prefereHauteContraste = window.matchMedia(
            "(prefers-contrast: high)"
        ).matches;

        // Configuration des animations selon les pr√©f√©rences
        this.configurerAnimations();

        // √âcoute des changements de pr√©f√©rences
        this.configurerEcoutePreferences();

        console.log("üé® GestionnaireAnimations initialis√©");
    }

    /**
     * Configure les animations selon les pr√©f√©rences utilisateur
     */
    configurerAnimations() {
        if (this.prefereReductionMouvement) {
            this.animationsActivees = false;
            console.log("‚ôø Animations d√©sactiv√©es (pr√©f√©rence utilisateur)");
        }

        if (this.prefereHauteContraste) {
            console.log("üîç Mode haute contraste d√©tect√©");
        }
    }

    /**
     * √âcoute les changements de pr√©f√©rences syst√®me
     */
    configurerEcoutePreferences() {
        const mediaQueryReduction = window.matchMedia(
            "(prefers-reduced-motion: reduce)"
        );
        const mediaQueryContraste = window.matchMedia("(prefers-contrast: high)");

        mediaQueryReduction.addEventListener("change", (e) => {
            this.prefereReductionMouvement = e.matches;
            this.animationsActivees = !e.matches;
            console.log(
                `‚ôø Animations ${this.animationsActivees ? "activ√©es" : "d√©sactiv√©es"}`
            );
        });

        mediaQueryContraste.addEventListener("change", (e) => {
            this.prefereHauteContraste = e.matches;
            console.log(`üîç Haute contraste ${e.matches ? "activ√©" : "d√©sactiv√©"}`);
        });
    }

    /**
     * Affiche un spinner de chargement EPL √©l√©gant
     *
     * @param {string} conteneurId - ID du conteneur
     * @param {string} message - Message de chargement
     * @param {Object} options - Options d'animation
     */
    afficherSpinnerEPL(conteneurId, message = "Chargement...", options = {}) {
        const conteneur = document.getElementById(conteneurId);
        if (!conteneur) {
            console.error(`‚ùå Conteneur "${conteneurId}" non trouv√©`);
            return;
        }

        const spinnerHTML = `
            <div class="spinner-epl" data-animation="spinner-epl">
                <div class="logo-epl-anime"></div>
                <p class="texte-chargement-epl">${message}</p>
                <div class="barre-progression-epl"></div>
            </div>
        `;

        conteneur.innerHTML = spinnerHTML;

        // Animation d'entr√©e si activ√©e
        if (this.animationsActivees) {
            setTimeout(() => {
                this.animerEntree(conteneur.querySelector(".spinner-epl"));
            }, 100);
        }

        console.log(`üé® Spinner EPL affich√© dans "${conteneurId}"`);
    }

    /**
     * Anime l'entr√©e d'un composant
     *
     * @param {HTMLElement} element - √âl√©ment √† animer
     * @param {string} typeAnimation - Type d'animation
     */
    animerEntree(element, typeAnimation = "composant") {
        if (!element || !this.animationsActivees) return;

        // Retire les classes d'animation existantes
        element.classList.remove(
            "composant-entree",
            "sidebar-entree",
            "footer-entree",
            "cta-entree"
        );

        // Ajoute la classe d'animation appropri√©e
        const classeAnimation = this.obtenirClasseAnimation(typeAnimation);
        element.classList.add(classeAnimation);

        // Retire la classe apr√®s l'animation
        setTimeout(() => {
            element.classList.remove(classeAnimation);
        }, this.dureeAnimations.lente);

        console.log(`üé® Animation d'entr√©e "${typeAnimation}" appliqu√©e`);
    }

    /**
     * Obtient la classe d'animation appropri√©e
     *
     * @param {string} type - Type d'animation
     * @returns {string} Classe CSS
     */
    obtenirClasseAnimation(type) {
        const correspondances = {
            sidebar: "sidebar-entree",
            footer: "footer-entree",
            cta: "cta-entree",
            composant: "composant-entree",
        };

        return correspondances[type] || "composant-entree";
    }

    /**
     * Anime la sortie d'un √©l√©ment
     *
     * @param {HTMLElement} element - √âl√©ment √† animer
     * @param {Function} callback - Fonction √† ex√©cuter apr√®s l'animation
     */
    animerSortie(element, callback) {
        if (!element || !this.animationsActivees) {
            if (callback) callback();
            return;
        }

        element.style.transition = "all 0.3s ease-out";
        element.style.opacity = "0";
        element.style.transform = "translateY(-20px)";

        setTimeout(() => {
            if (callback) callback();
        }, 300);

        console.log("üé® Animation de sortie appliqu√©e");
    }

    /**
     * Anime le changement de th√®me
     *
     * @param {string} nouveauTheme - Nouveau th√®me
     */
    animerChangementTheme(nouveauTheme) {
        if (!this.animationsActivees) return;

        // Ajoute une classe temporaire pour l'animation
        document.body.classList.add("transition-theme-epl");

        // Retire la classe apr√®s la transition
        setTimeout(() => {
            document.body.classList.remove("transition-theme-epl");
        }, 500);

        console.log(`üé® Animation de changement de th√®me vers "${nouveauTheme}"`);
    }

    /**
     * Affiche une notification anim√©e
     *
     * @param {string} message - Message √† afficher
     * @param {string} type - Type de notification (success, error, info)
     * @param {number} duree - Dur√©e d'affichage en ms
     */
    afficherNotification(message, type = "info", duree = 5000) {
        const notification = document.createElement("div");
        notification.className = `notification-epl notification-${type}`;

        const icone = this.obtenirIconeNotification(type);
        const couleur = this.obtenirCouleurNotification(type);

        notification.innerHTML = `
            <div class="notification-epl-contenu">
                <div class="notification-epl-header">
                    <span class="notification-epl-icone">${icone}</span>
                    <h4 class="notification-epl-titre">${this.obtenirTitreNotification(
            type
        )}</h4>
                    <button class="notification-epl-fermer" onclick="this.parentElement.parentElement.parentElement.remove()">√ó</button>
                </div>
                <p class="notification-epl-message">${message}</p>
            </div>
        `;

        // Styles dynamiques
        notification.style.borderLeft = `4px solid ${couleur}`;

        document.body.appendChild(notification);

        // Animation d'entr√©e
        if (this.animationsActivees) {
            setTimeout(() => {
                notification.style.opacity = "1";
                notification.style.transform = "translateX(0) scale(1)";
            }, 100);
        }

        // Suppression automatique
        setTimeout(() => {
            this.fermerNotification(notification);
        }, duree);

        console.log(`üé® Notification "${type}" affich√©e: ${message}`);
    }

    /**
     * Ferme une notification avec animation
     *
     * @param {HTMLElement} notification - Notification √† fermer
     */
    fermerNotification(notification) {
        if (!notification) return;

        if (this.animationsActivees) {
            notification.classList.add("fermeture");
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        } else {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }
    }

    /**
     * Obtient l'ic√¥ne pour un type de notification
     *
     * @param {string} type - Type de notification
     * @returns {string} Ic√¥ne
     */
    obtenirIconeNotification(type) {
        const icones = {
            success: "‚úÖ",
            error: "‚ùå",
            warning: "‚ö†Ô∏è",
            info: "‚ÑπÔ∏è",
        };

        return icones[type] || icones["info"];
    }

    /**
     * Obtient la couleur pour un type de notification
     *
     * @param {string} type - Type de notification
     * @returns {string} Couleur CSS
     */
    obtenirCouleurNotification(type) {
        const couleurs = {
            success: "var(--couleur-secondaire)",
            error: "var(--couleur-erreur)",
            warning: "var(--couleur-avertissement)",
            info: "var(--couleur-info)",
        };

        return couleurs[type] || couleurs["info"];
    }

    /**
     * Obtient le titre pour un type de notification
     *
     * @param {string} type - Type de notification
     * @returns {string} Titre
     */
    obtenirTitreNotification(type) {
        const titres = {
            success: "Succ√®s",
            error: "Erreur",
            warning: "Attention",
            info: "Information",
        };

        return titres[type] || titres["info"];
    }

    /**
     * Anime un bouton au clic
     *
     * @param {HTMLElement} bouton - Bouton √† animer
     */
    animerClicBouton(bouton) {
        if (!bouton || !this.animationsActivees) return;

        bouton.classList.add("bouton-epl-hover");
        bouton.style.transform = "scale(0.95)";

        setTimeout(() => {
            bouton.style.transform = "scale(1)";
        }, 150);

        console.log("üé® Animation de clic appliqu√©e");
    }

    /**
     * Anime un lien de navigation
     *
     * @param {HTMLElement} lien - Lien √† animer
     */
    animerLienNavigation(lien) {
        if (!lien || !this.animationsActivees) return;

        lien.classList.add("lien-nav-epl");

        // Animation au hover
        lien.addEventListener("mouseenter", () => {
            if (this.animationsActivees) {
                lien.style.transform = "translateX(5px)";
            }
        });

        lien.addEventListener("mouseleave", () => {
            if (this.animationsActivees) {
                lien.style.transform = "translateX(0)";
            }
        });
    }

    /**
     * Active ou d√©sactive les animations
     *
     * @param {boolean} active - Activer les animations
     */
    activerAnimations(active) {
        this.animationsActivees = active;

        if (!active) {
            // Retire toutes les classes d'animation
            document.querySelectorAll("[data-animation]").forEach((element) => {
                element.classList.remove(
                    "composant-entree",
                    "sidebar-entree",
                    "footer-entree",
                    "cta-entree"
                );
            });
        }

        console.log(`üé® Animations ${active ? "activ√©es" : "d√©sactiv√©es"}`);
    }

    /**
     * Obtient l'√©tat des animations
     *
     * @returns {Object} √âtat des animations
     */
    obtenirEtatAnimations() {
        return {
            activees: this.animationsActivees,
            reductionMouvement: this.prefereReductionMouvement,
            hauteContraste: this.prefereHauteContraste,
        };
    }
}

// Instance globale accessible partout dans l'application
const animateurEPL = new GestionnaireAnimations();

// Export pour utilisation en module si n√©cessaire
if (typeof module !== "undefined" && module.exports) {
    module.exports = { GestionnaireAnimations, animateurEPL };
}

// Export pour utilisation globale
if (typeof window !== "undefined") {
    window.GestionnaireAnimations = GestionnaireAnimations;
    window.animateurEPL = animateurEPL;
}